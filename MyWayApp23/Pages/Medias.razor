@page "/medias"
@using MyWayApp23.Components
@*@inject IHistoricoAverageService HistoricoAverageService*@
@inject IHistoricoService service

<PageTitle>Médias</PageTitle>

<AuthorizeView Context="AuthContext">
    <Authorized>
        <MudItem xs="12">
            <MudBreadcrumbs Items="_breads"></MudBreadcrumbs>
        </MudItem>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h3">
                    Médias por mês e dia da semana.
                </MudText>
            </MudItem>
            <MudItem xs="2">
                @*<MudDatePicker Label="Ano" @bind-Date="_date" OpenTo="OpenTo.Year"
                FixMonth="@DateTime.Today.Month" FixDay="@DateTime.Today.Day" DateFormat="yyyy" />*@
                <MudSelect T="int" Label="Ano" Variant="Variant.Text" @bind-Value="_year">
                    @foreach (var year in last5Years!)
                    {
                        <MudSelectItem Value="@year.Year" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="2">
                <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Search" 
                OnClick="OnYearChange">Filtrar</MudButton>
            </MudItem>
            <MudItem xs="8"></MudItem>
            <MudItem xs="12">
                @if (isVisible)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
            </MudItem>
            <MudItem xs="4">
                <HistoricoDetalheTableComponent Items="@historico" />
            </MudItem>
            @*<MudItem xs="4">
            <YearMonthAverageTableComponent Items="@averageTotal"
            IsVisible="@isVisible"
            HeaderText="Média total" />
            </MudItem>
            <MudItem xs="4">
            <YearMonthAverageTableComponent Items="@averageDep"
            IsVisible="@isVisible"
            HeaderText="Média de partidas" />
            </MudItem>
            <MudItem xs="4">
            <YearMonthAverageTableComponent Items="@averageArr"
            IsVisible="@isVisible"
            HeaderText="Média de chegadas" />
            </MudItem>
            <MudItem xs="4">
            <YearMonthAverageTableComponent Items="@averageJet"
            IsVisible="@isVisible"
            HeaderText="Média em JetBridge" />
            </MudItem>
            <MudItem xs="4">
            <YearMonthAverageTableComponent Items="@averageRemote"
            IsVisible="@isVisible"
            HeaderText="Média em Remoto" />
            </MudItem>
            <MudItem xs="4">
            <YearMonthAverageTimeTableComponent Items="@averageTime"
            IsVisible="@isVisible"
            HeaderText="Média de duração" />
            </MudItem>*@
        </MudGrid>

    </Authorized>
    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>


@code {

    private List<BreadcrumbItem> _breads = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Início", href: "#"),
        new BreadcrumbItem("Médias", null, disabled: true)
    };

    IEnumerable<DateTime>? last5Years;
    private bool isVisible = true;
    private int _year = DateTime.Today.Year;

    private List<HistoricoAssistencia> historico = new List<HistoricoAssistencia>();
    //private List<HistoricoAverage> averageTotal = new List<HistoricoAverage>();
    //private List<HistoricoAverage> averageDep = new List<HistoricoAverage>();
    //private List<HistoricoAverage> averageArr = new List<HistoricoAverage>();
    //private List<HistoricoAverage> averageJet = new List<HistoricoAverage>();
    //private List<HistoricoAverage> averageRemote = new List<HistoricoAverage>();
    //private List<HistoricoAverageTime> averageTime = new List<HistoricoAverageTime>();
    protected override async Task OnInitializedAsync()
    {
        last5Years = from n in Enumerable.Range(0, 5)
                     select DateTime.UtcNow.AddYears(-n);
        await Task.Delay(5);
        GetData();
    }

    private void OnYearChange()
    {
        isVisible = true;
        Task.Delay(15);
        GetData();
    }

    //private void DateChanged()
    //{
    //    isVisible = true;
    //    Task.Delay(15);
    //    GetData();
    //}

    private async void GetData()
    {
        if (_year > 0)
        {
            historico = await service.GetByYearAsync(_year);
            //averageTotal = HistoricoAverageService.GetAvgTotal((DateTime)_date);
            //averageDep = HistoricoAverageService.GetAvgArrDep((DateTime)_date, "D");
            //averageArr = HistoricoAverageService.GetAvgArrDep((DateTime)_date, "A");
            //averageJet = HistoricoAverageService.GetAvgRemJet((DateTime)_date, "JETBRIDGE");
            //averageRemote = HistoricoAverageService.GetAvgRemJet((DateTime)_date, "REMOTE");
            //averageTime = HistoricoAverageService.GetAvgTime((DateTime)_date);
        }
        isVisible = false;
        StateHasChanged();
    }
} 