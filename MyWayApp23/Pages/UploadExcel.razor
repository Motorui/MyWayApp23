@page "/uploadexcel"

<PageTitle>Upload Excel</PageTitle>

@using Services.Excel

@inject ISnackbar Snackbar
@inject IReadExcelService readService
@inject IDataTableConverter converter
@inject IAssistenciaService assistenciaService
@inject IHistoricoService historicoService
@inject IHistoricoDetalheService detalheService

<AuthorizeView>
    <Authorized>
        @if (IsUploading)
        {
            <MudOverlay Visible="IsUploading" DarkBackground="true" ZIndex="9999" AutoClose="false">

                <MudText Typo="Typo.h5" Color="Color.Primary"
                     Class="d-flex align-center justify-center mud-width-full">
                    A ler ficheiro!!!
                </MudText>
                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-2" />

            </MudOverlay>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="12" lg="12" md="12" xl="12" xxl="12">
                    <MudBreadcrumbs Items="_breads"></MudBreadcrumbs>
                </MudItem>
                <MudItem xs="12" sm="12" lg="12" md="12" xl="12" xxl="12">
                    <InputFile id="fileInput112" OnChange="UploadFiles" hidden accept=".xls, .xlsx" />

                    <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Dark"
                           StartIcon="@Icons.Filled.UploadFile"
                           for="fileInput112">
                        Upload ficheiros de assistências
                    </MudButton>

                </MudItem>
                <MudItem xs="12" sm="12" lg="12" md="12" xl="12" xxl="12">
                    @if (Value > 0)
                    {
                        <MudProgressLinear Color="Color.Success" Value="@Value" Size="Size.Large" Class="my-5">
                            <MudText Typo="Typo.button" Color="Color.Default">
                                <b>@((int)Value)%</b>
                            </MudText>
                        </MudProgressLinear>
                        <MudText>@ProgressMessage</MudText>
                    }

                </MudItem>
            </MudGrid>

        }
    </Authorized>
    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>


@code {
    public double Value { get; set; } = 0;
    public string? ProgressMessage { get; set; } = string.Empty;
    public bool IsUploading = false;

    private List<BreadcrumbItem> _breads = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Início", href: "#"),
        new BreadcrumbItem("Upload", href: null, disabled: true)
    };

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        IsUploading = true;
        var excelFile = e.File;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        var dt = await readService.ReadExcelAsync(excelFile);

        Value = 0;
        int row = 0;
        int atualiza = 0;
        int cria = 0;
        if (converter.ReturnFileType(dt) == "assistencias")
        {
            IsUploading = false;
            var assistencias = converter.ConvertDataTableToAssistencias(dt);
            int total = assistencias.Count;

            foreach (var assistencia in assistencias)
            {
                row++;
                Value = 100.0 * row / assistencias.Count;

                if (await assistenciaService.ExistsAsync(assistencia) != null)
                {
                    atualiza++;
                }
                else
                {
                    cria++;
                }
                ProgressMessage = $"Foram inseridos {cria} e atualizados {atualiza} registos, de um total de {total} registos";

                StateHasChanged();
                await Task.Delay(100);

                await assistenciaService.CreateOrUpdateAsync(assistencia);
            }
            Snackbar.Add($"<ul><li><h3>Ficheiro carregado!</h3></li>" +
                $"<li>Foram inseridos {++cria - 1}.</li>" +
                $"<li>Foram atualizados {++atualiza - 1}.</li>" +
                $"<li>De um total de {++total - 1} registos.</li></ul>",
                Severity.Success);
            Value = 0;
            StateHasChanged();

        }
        else if (converter.ReturnFileType(dt) == "historico")
        {
            IsUploading = false;
            List<HistoricoAssistencia> historicos = converter.ConvertDataTableToHistorico(dt);
            int total = historicos.Count;

            foreach (var historico in historicos)
            {
                row++;
                Value = 100.0 * row / historicos.Count;

                if (await historicoService.ExistsAsync(historico) != null)
                {
                    atualiza++;
                }
                else
                {
                    cria++;
                }
                ProgressMessage = $"Foram inseridos {cria} e atualizados {atualiza} registos, de um total de {total} registos";

                StateHasChanged();
                await Task.Delay(10);

                await historicoService.CreateOrUpdateAsync(historico);
            }

            Snackbar.Add($"<ul><li><h3>Ficheiro carregado!</h3></li>" +
                $"<li>Foram inseridos {++cria - 1}.</li>" +
                $"<li>Foram atualizados {++atualiza - 1}.</li>" +
                $"<li>De um total de {++total - 1} registos.</li></ul>",
                Severity.Success);
            Value = 0;
            StateHasChanged();
        }
        else
        {
            IsUploading = false;
            Snackbar.Add($"Ficheiro errado!!!", Severity.Error);
            StateHasChanged();
        }
    }
}
