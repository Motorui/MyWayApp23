@inject IJSRuntime JSRuntime

<div class="small-chart-container">
    <canvas id="@Id" height="400"></canvas>
</div>

@code {
    [Parameter]
    public List<HistoricoAssistencia>? ChartData { get; set; }

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        long notif = TimeSpan.FromHours(36).Ticks;
        if (ChartData != null)
        {
            var chartData = ChartData.AsEnumerable()
            .Where(n => n.Notif > notif)
            .GroupBy(d => new { Hora = d.Data.Hour })
            .Select(x => new
            {
                Hora = x.Key.Hora,
                Jan = x.Count(d => d.Data.Month.Equals(1)),
                Fev = x.Count(d => d.Data.Month.Equals(2)),
                Mar = x.Count(d => d.Data.Month.Equals(3)),
                Abr = x.Count(d => d.Data.Month.Equals(4)),
                Mai = x.Count(d => d.Data.Month.Equals(5)),
                Jun = x.Count(d => d.Data.Month.Equals(6)),
                Jul = x.Count(d => d.Data.Month.Equals(7)),
                Ago = x.Count(d => d.Data.Month.Equals(8)),
                Set = x.Count(d => d.Data.Month.Equals(9)),
                Out = x.Count(d => d.Data.Month.Equals(10)),
                Nov = x.Count(d => d.Data.Month.Equals(11)),
                Dez = x.Count(d => d.Data.Month.Equals(12)),
            }).OrderBy(d => d.Hora).ToList();

            await JSRuntime.InvokeVoidAsync("nonNotifiedTotalByHourChart", Id, chartData);
        }
    }

}