@page "/"
@using MyWayApp23.Components.Charts

@inject IHistoricoService service

<PageTitle>Index</PageTitle>

@*<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />*@

<AuthorizeView>
    <Authorized>
        @*<p>Olá, @context.User.Identity!.Name</p>*@
        @*        <MudItem xs="12">
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="50%"></MudChart>
        </MudItem>*@
        @*        @if (historico != null)
        {
        var data = historico.GroupBy(x => new { Dia = x.Data.Date })
        .Select(x => new
        {
        labels = x.Key.Dia.ToString("d/MMM"),
        real = x.Count(),
        dep = x.Count(m => m.Mov == "D"),
        arr = x.Count(m => m.Mov == "A")
        }).ToList();


        string[] labels = (from e in data select e.labels).ToArray();
        string[] real = (from e in data select e.real.ToString()).ToArray();



        }*@

        @*        <Chart Id="pie1" Type="@Chart.ChartType.Pie"
        Data="@(new[] { "1", "2" })" BackgroundColor="@(new[] { "blue","green" })"
        Labels="@(new[] { "Fail","Ok" })">
        </Chart>*@

        @if (historico != null)
        {
            <LineChart Id="Line" Items="historico"></LineChart>
        }

    </Authorized>
    <NotAuthorized>
        <p>Não sei o teu username sem te logares!</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private List<HistoricoAssistencia> historico = new List<HistoricoAssistencia>();
    protected override async Task OnInitializedAsync()
    {
        historico = await service.GetByYearAsync(DateTime.Today.Year);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //var labels = data.Select(m => m.Mes).ToArray();

            //ChartData = historico.GroupBy(x => new { Dia = x.Data.Date })
            //    .Select(x => new
            //    {
            //        labels = x.Key.Dia.ToString("d/MMM").ToArray(),
            //        datasets = new object[] { new
            //            {
            //                label= "Real",
            //                backgroundColor= "rgb(255, 99, 132)",
            //                borderColor= "rgb(255, 99, 132)",
            //                data = x.Count(),
            //                fill = 1

            //            },
            //            new {
            //                label= "Dep",
            //                backgroundColor= "rgb(0, 99, 132)",
            //                borderColor= "rgb(0, 99, 132)",
            //                data = x.Count(m => m.Mov == "D"),
            //                fill = 1
            //            } ,
            //            new {
            //                label= "Arr",
            //                backgroundColor= "rgb(0, 88, 165)",
            //                borderColor= "rgb(0, 99, 132)",
            //                data = x.Count(m => m.Mov == "A"),
            //                fill = 1
            //            }}
            //    }).ToArray();

        }
    }
}