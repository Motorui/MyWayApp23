@inject IJSRuntime JSRuntime

<div class="chart-container">
    <canvas id="@Id"></canvas>
</div>

@code {

    [Parameter]
    public List<HistoricoAssistencia>? ChartData { get; set; }

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        long notif = TimeSpan.FromHours(36).Ticks;
        if (ChartData != null)
        {
            List<PaxDemandModel> PaxDemand = ChartData.AsEnumerable()
            .GroupBy(d => new { Dia = d.Data.Date })
            .Select(x => new PaxDemandModel
                {
                    Dias = x.Key.Dia,
                    Total = x.Count(d => d.Data.Date.Equals(x.Key.Dia.Date)),
                    //notificadas
                    Partidas = x.Count(d => d.Data.Date.Equals(x.Key.Dia.Date) && d.Notif >= notif),
                    //não notificadas
                    Chegadas = x.Count(d => d.Data.Date.Equals(x.Key.Dia.Date) && d.Notif < notif),
                }).OrderBy(d => d.Dias).ToList();


            var config = new
            {
                Type = "line",
                Options = new
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Align = LegendAlign.Center,
                            Display = true,
                            Position = LegendPosition.Bottom
                        }
                    },
                    Tooltips = new
                    {
                        Mode = "index",
                        Intersect = false,
                        Callbacks = new
                        {
                            Label = "function(t, d) {" +
                        "if (t.datasetIndex === 0)" +
                        "{ return '$' + t.yLabel.toFixed(2); }" +
                        "else if (t.datasetIndex === 1)" +
                        "{ if (t.yLabel.toString().length === 9)" +
                            "{return Math.round(+t.yLabel.toString().replace(/ (\\d{ 3})(.*) /, '$1.$2')) +'M'; }" +
                            "else return Math.round(+t.yLabel.toString().replace(/ (\\d{ 2})(.*) /, '$1.$2')) +'M';" +
                        "}}",
                        }
                    }
                },
                Data = new
                {
                    Datasets = new[]
                    {
                        new
                        {
                            Label = "Real",
                            Data = PaxDemand.Select(d => d.Total).ToList(),
                            BackgroundColor = "rgba(220,20,60,0.2)",
                            BorderColor = "rgba(220,20,60,1)",
                            Fill = true
                        },
                        new
                        {
                            Label = ">36h",
                            Data = PaxDemand.Select(d => d.Partidas).ToList(),
                            BackgroundColor = "rgba(34,139,34,0.2)",
                            BorderColor = "rgba(34,139,34,1)",
                            Fill = true
                        },
                        new
                        {
                            Label = "<36h",
                            Data = PaxDemand.Select(d => d.Chegadas).ToList(),
                            BackgroundColor = "rgba(30,144,255,0.2)",
                            BorderColor = "rgba(30,144,255,1)",
                            Fill = true
                        }
            },
                    Labels = PaxDemand.Select(d => d.Dias.ToString("d/MMM")).ToList()
                }
            };

            await JSRuntime.InvokeVoidAsync("setup", Id, config);
        }
    }
}