@page "/uploadexcel"

<PageTitle>Upload Excel</PageTitle>

@implements IDisposable
@inject ISnackbar Snackbar
@inject ReadExcelService readService
@inject IAssistenciaService assistenciaService

<AuthorizeView>
    <Authorized>

        <MudGrid>
            <MudItem xs="12" sm="12" lg="12" md="12" xl="12" xxl="12">
                <MudBreadcrumbs Items="_breads"></MudBreadcrumbs>
            </MudItem>
            <MudItem xs="12" sm="12" lg="12" md="12" xl="12" xxl="12">
                <InputFile id="fileInput112" OnChange="UploadFiles" hidden accept=".xls, .xlsx" />

                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Dark"
                           StartIcon="@Icons.Filled.UploadFile"
                           for="fileInput112">
                    Upload ficheiros de assistências
                </MudButton>

            </MudItem>
            <MudItem xs="12" sm="12" lg="12" md="12" xl="12" xxl="12">
                @if (Value > 0)
                {
                    <MudProgressLinear Color="Color.Success" Value="@Value" Size="Size.Large" Class="my-5">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default">
                            <b>@((int)Value)%</b>
                        </MudText>
                    </MudProgressLinear>
                    <MudText>@ProgressMessage</MudText>
                }

            </MudItem>
        </MudGrid>


    </Authorized>
    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>


@code {
    public double Value { get; set; } = 0;
    public string? ProgressMessage { get; set; } = string.Empty;

    private List<BreadcrumbItem> _breads = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Upload", href: null, disabled: true)
    };

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        var excelFile = e.File;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        var dt = await readService.ReadExcelAsync(excelFile);

        List<string> columns = dt.Columns.Cast<System.Data.DataColumn>()
                                 .Select(x => x.ColumnName)
                                 .ToList();

        List<string> assistencias = new()
        {
            "Aeroporto", "Msg", "Notif", "Data", "Voo", "Mov", "Orig Dest", "Pax", "SSR", "AC", "Stand", "Exit", "Ck In", "Gate", "Transferencia"
        };

        List<string> historico = new()
        {
            "Tipo Msg", "Aeroporto", "Notif", "Data Voo", "Hora Voo", "Data Contacto", "Hora Contacto", "Data Calcos", "Hora Calcos",
            "Data Inicio Assistencia", "Hora Inicio Assistencia", "Data Fim Assistencia", "Hora Fim Assistencia", "Voo", "Mov", "Orig Dest",
            "Pax", "SSR", "AC", "Stand", "Exit", "Ck In", "Gate", "Transferencia", "Equipamentos", "Justificacao Incumprimento"
        };

        if (columns.SequenceEqual(assistencias))
        {
            List<Assistencia> lista = new();
            lista = (from DataRow dr in dt.Rows
                     select new Assistencia()
                         {
                             Id = Guid.NewGuid(),
                             Aeroporto = dr["Aeroporto"].ToString(),
                             Msg = dr["Msg"].ToString(),
                             Notif = dr["Notif"].ToString(),
                             Data = DateTime.Parse(dr["Data"].ToString()),
                             Voo = dr["Voo"].ToString(),
                             Mov = dr["Mov"].ToString(),
                             OrigDest = dr["Orig Dest"].ToString(),
                             Pax = dr["Pax"].ToString(),
                             SSR = dr["SSR"].ToString(),
                             AC = dr["AC"].ToString(),
                             Stand = dr["Stand"].ToString(),
                             Exit = dr["Exit"].ToString(),
                             CkIn = dr["Ck In"].ToString(),
                             Gate = dr["Gate"].ToString(),
                             Transferencia = dr["Transferencia"].ToString(),
                         }).ToList();

            //Snackbar.Add($"Listagem de assistências, com {dt.Rows.Count} records", Severity.Info);
        }
        else if (columns.SequenceEqual(historico))
        {
            Snackbar.Add($"Listagem de histórico, com {dt.Rows.Count} records", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Ficheiro errado!!!", Severity.Error);
        }

    }

    public async void ProgressCount(double step, int row)
    {
        Value = 0;
        do
        {
            if (_disposed)
            {
                return;
            }

            row += 1;
            Value += step;
            ProgressMessage = $"Processadas {row} linhas!";

            StateHasChanged();
            await Task.Delay(100);
        } while (Value < 100);

        ProgressCount(step, row);
    }

    bool _disposed;
    public void Dispose() => _disposed = true;
}
