@page "/"
@using MyWayApp23.Components.Charts

@inject IHistoricoService service

<PageTitle>Index</PageTitle>

@*<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />*@

<AuthorizeView>
    <Authorized>
        @*<p>Olá, @context.User.Identity!.Name</p>*@
        @if (historico != null)
        {
            <MudOverlay Visible="isVisible" DarkBackground="true" ZIndex="9999" AutoClose="false">

                <MudText Typo="Typo.h5" Color="Color.Primary"
                     Class="d-flex align-center justify-center mud-width-full">
                    A Carregar dados...
                </MudText>
                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-2" />

            </MudOverlay>
        }
        
        @if(historico != null)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Class="pa-5" Elevation="5">
                        <PaxDemandChart @ref="paxDemandChart"></PaxDemandChart>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-5" Elevation="5">
                        <DemandByShiftChart @ref="demandByShiftChart"></DemandByShiftChart>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </Authorized>
    <NotAuthorized>
        <p>Não sei o teu username sem te logares!</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private bool isVisible = true;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private PaxDemandChart? paxDemandChart;
    private DemandByShiftChart? demandByShiftChart;

    private List<HistoricoAssistencia> historico { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        historico = await service.GetByYearAsync(DateTime.Today.Year);

        paxDemandChart!.OnInit(historico);
        demandByShiftChart!.OnInit(historico);
        isVisible = false;
        StateHasChanged();
    }

}